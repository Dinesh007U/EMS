// <auto-generated />
using System;
using DAL.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(EventManagementDbContext))]
    [Migration("20240411122026_CreateDb")]
    partial class CreateDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DAL.Models.EventDetails", b =>
                {
                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("EventId");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("EventDescription");

                    b.Property<string>("EventCategory")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("EventCategory");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("EventDate");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("EventName");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("IsDeleted");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Status");

                    b.HasKey("EventId");

                    b.ToTable("EventDetails");
                });

            modelBuilder.Entity("DAL.Models.ParticipantEventDetails", b =>
                {
                    b.Property<Guid>("ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("EventId");

                    b.Property<bool>("IsAttended")
                        .HasColumnType("bit")
                        .HasColumnName("IsAttended");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("IsDeleted");

                    b.Property<string>("ParticipantEmailId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("participantEmail");

                    b.HasKey("ID");

                    b.HasIndex("EventId");

                    b.HasIndex("ParticipantEmailId");

                    b.ToTable("participantEventDetils");
                });

            modelBuilder.Entity("DAL.Models.SessionInfo", b =>
                {
                    b.Property<Guid>("SessionId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("SessionId");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("EventId");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("IsDeleted");

                    b.Property<DateTime>("SessionEnd")
                        .HasColumnType("datetime2")
                        .HasColumnName("EndTime");

                    b.Property<DateTime>("SessionStart")
                        .HasColumnType("datetime2")
                        .HasColumnName("StartTime");

                    b.Property<string>("SessionTitle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("SessionTitle");

                    b.Property<string>("SessionUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SessionUrl");

                    b.Property<Guid>("SpeakerId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("SpeakerId");

                    b.HasKey("SessionId");

                    b.HasIndex("EventId");

                    b.HasIndex("SpeakerId");

                    b.ToTable("SessionInfo");
                });

            modelBuilder.Entity("DAL.Models.SpeakersDetails", b =>
                {
                    b.Property<Guid>("SpeakerId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("SpeakerId");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("IsDeleted");

                    b.Property<string>("SpeakerName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("SpeakerName");

                    b.HasKey("SpeakerId");

                    b.ToTable("SpeakersDetails");
                });

            modelBuilder.Entity("DAL.Models.UserInfo", b =>
                {
                    b.Property<string>("EmailId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("EmailId");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("IsDeleted");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Password");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Role");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("UserName");

                    b.HasKey("EmailId");

                    b.ToTable("UserInfo");

                    b.HasData(
                        new
                        {
                            EmailId = "admin@gmail.com",
                            IsDeleted = false,
                            Password = "admin",
                            Role = "Admin",
                            UserName = "Admin"
                        });
                });

            modelBuilder.Entity("DAL.Models.ParticipantEventDetails", b =>
                {
                    b.HasOne("DAL.Models.EventDetails", null)
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.UserInfo", null)
                        .WithMany()
                        .HasForeignKey("ParticipantEmailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DAL.Models.SessionInfo", b =>
                {
                    b.HasOne("DAL.Models.EventDetails", null)
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.SpeakersDetails", null)
                        .WithMany()
                        .HasForeignKey("SpeakerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
